/*
 * Copyright (c) 2017 Claudiu Soroiu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ro.derbederos.untwist;

import org.apache.commons.math3.exception.OutOfRangeException;

import static java.lang.Integer.toUnsignedLong;

public abstract class ReverseBitsStreamGenerator implements ReverseRandomGenerator {
    private static final long serialVersionUID = 1L;

    private static final double DOUBLE_UNIT = 0x1.0p-52d; // 1.0 / (1L << 52)
    private static final float FLOAT_UNIT = 0x1.0p-23f;   // 1.0 / (1 << 23)

    /**
     * Generate next pseudorandom number.
     * <p>
     * This method is the core generation algorithm. It is used by all the
     * public generation methods for the various primitive types.
     *
     * @param bits number of random bits to produce
     * @return random bits generated
     */
    protected abstract int next(int bits);

    /**
     * The reverse of {@link #next(int)}.
     * <p>
     * Generate previous pseudorandom number.
     * <p>
     * This method is the core generation algorithm. It is used by all the
     * public generation methods for the various primitive types.
     *
     * @param bits number of random bits to produce
     * @return random bits generated
     */
    protected abstract int prev(int bits);

    /**
     * {@inheritDoc}
     */
    @Override
    public void nextBytes(byte[] bytes) {
        nextBytesFill(bytes, 0, bytes.length);
    }

    /**
     * Generates random bytes and places them into a user-supplied array.
     * <p>
     * The array is filled with bytes extracted from random integers.
     * This implies that the number of random bytes generated may be larger than
     * the length of the byte array.
     * </p>
     *
     * @param bytes the non-null byte array in which to put the random bytes.
     * @param start index at which to start inserting the generated bytes.
     * @param len   number of bytes to insert.
     */
    public void nextBytes(byte[] bytes,
                          int start,
                          int len) {
        if (start < 0 ||
                start >= bytes.length) {
            throw new OutOfRangeException(start, 0, bytes.length);
        }
        if (len < 0 ||
                len > bytes.length - start) {
            throw new OutOfRangeException(len, 0, bytes.length - start);
        }

        nextBytesFill(bytes, start, len);
    }

    private void nextBytesFill(byte[] bytes, int start, int len) {
        int index = start; // Index of first insertion.

        // Index of first insertion plus multiple 4 part of length (i.e. length
        // with two least significant bits unset).
        final int indexLoopLimit = index + (len & 0x7ffffffc);

        // Start filling in the byte array, 4 bytes at a time.
        while (index < indexLoopLimit) {
            final int random = next(32);
            bytes[index++] = (byte) random;
            bytes[index++] = (byte) (random >>> 8);
            bytes[index++] = (byte) (random >>> 16);
            bytes[index++] = (byte) (random >>> 24);
        }

        final int indexLimit = start + len; // Index of last insertion + 1.

        // Fill in the remaining bytes.
        if (index < indexLimit) {
            int random = next(32);
            while (true) {
                bytes[index++] = (byte) random;
                if (index < indexLimit) {
                    random >>>= 8;
                } else {
                    break;
                }
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void prevBytes(byte[] bytes) {
        prevBytesFill(bytes, 0, bytes.length);
    }

    /**
     * The reverse of {@link #nextBytes(byte[], int, int)}.
     *
     * @param bytes the non-null byte array in which to put the random bytes.
     * @param start index at which to start inserting the generated bytes.
     * @param len   number of bytes to insert.
     */
    public void prevBytes(byte[] bytes, int start, int len) {
        if (start < 0 ||
                start >= bytes.length) {
            throw new OutOfRangeException(start, 0, bytes.length);
        }
        if (len < 0 ||
                len > bytes.length - start) {
            throw new OutOfRangeException(len, 0, bytes.length - start);
        }

        prevBytesFill(bytes, start, len);
    }

    private void prevBytesFill(byte[] bytes,
                               int start,
                               int len) {
        final int bytesInInt = Integer.SIZE / Byte.SIZE;
        final int remainder = bytes.length % bytesInInt;
        if (remainder > 0) {
            for (int i = remainder - 1,
                 rnd = prevInt();
                 i >= 0; i--, rnd >>= Byte.SIZE) {
                bytes[i + start] = (byte) (rnd);
            }
        }
        for (int i = remainder + start, indexLimit = start + len; i < indexLimit; ) {
            for (int rnd = prevInt(),
                 n = bytesInInt;
                 n-- > 0; rnd <<= Byte.SIZE) {
                bytes[i++] = (byte) (rnd >>> 24);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int nextInt() {
        return next(32);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int nextInt(int bound) {
        return DefaultRandomPrimitivesFactory.nextInt(this, bound);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int prevInt() {
        return prev(32);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int prevInt(int bound) {
        return DefaultRandomPrimitivesFactory.prevInt(this, bound);
    }

    /**
     * {@inheritDoc}
     * <p>
     * For the unbounded case: uses {@link #nextInt()}.
     * For the bounded case with representable range: uses {@link #nextInt(int)}.
     * For the bounded case with unrepresentable range: uses {@link #nextInt()}.
     */
    @Override
    public int nextInt(int origin, int bound) {
        return DefaultRandomPrimitivesFactory.nextInt(this, origin, bound);
    }

    /**
     * {@inheritDoc}
     * <p>
     * For the unbounded case: uses {@link #prevInt()}.
     * For the bounded case with representable range: uses {@link #prevInt(int)}.
     * For the bounded case with unrepresentable range: uses {@link #prevInt()}.
     */
    @Override
    public int prevInt(int origin, int bound) {
        return DefaultRandomPrimitivesFactory.prevInt(this, origin, bound);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public long nextLong() {
        final long high = toUnsignedLong(next(32)) << 32;
        final long low = toUnsignedLong(next(32));
        return high | low;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long prevLong() {
        long low = toUnsignedLong(prev(32));
        long high = toUnsignedLong(prev(32)) << 32;
        return low | high;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long nextLong(long bound) throws IllegalArgumentException {
        return DefaultRandomPrimitivesFactory.nextLong(this, bound);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long prevLong(long bound) throws IllegalArgumentException {
        return DefaultRandomPrimitivesFactory.prevLong(this, bound);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean nextBoolean() {
        return DefaultRandomPrimitivesFactory.toBoolean(next(1));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean prevBoolean() {
        return DefaultRandomPrimitivesFactory.toBoolean(prev(1));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public float nextFloat() {
        return next(23) * FLOAT_UNIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public float prevFloat() {
        return prev(23) * FLOAT_UNIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public double nextDouble() {
        final long high = ((long) next(26)) << 26;
        final int low = next(26);
        return (high | low) * DOUBLE_UNIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public double prevDouble() {
        final int low = prev(26);
        final long high = ((long) prev(26)) << 26;
        return (low | high) * DOUBLE_UNIT;
    }


    // the state of the generator
    private boolean shouldReverseGaussian;
    private double nextGaussian;

    /**
     * Clears the cache used by the default implementation of
     * {@link #nextGaussian}.
     */
    public void clear() {
        nextGaussian = Double.NaN;
        shouldReverseGaussian = false;
    }

    /**
     * {@inheritDoc}
     * <p>
     * It uses <a href="https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform#Implementation">Box-MÃ¼ller transform</a>.
     */
    @Override
    public double nextGaussian() {
        shouldReverseGaussian = !shouldReverseGaussian;

        final double random;
        if (Double.isNaN(nextGaussian)) {
            // generate a new pair of gaussian numbers
            final double x = nextDouble();
            final double y = nextDouble();
            final double alpha = 2 * Math.PI * x;
            final double r = StrictMath.sqrt(-2 * StrictMath.log(y));
            random = r * StrictMath.cos(alpha);
            nextGaussian = r * StrictMath.sin(alpha);
        } else {
            // use the second element of the pair already generated
            random = nextGaussian;
            nextGaussian = Double.NaN;
        }

        return random;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void undoNextGaussian() {
        if (shouldReverseGaussian) {
            prevDouble();
            prevDouble();
            clear();
        } else {
            shouldReverseGaussian = true;
        }
    }
}
